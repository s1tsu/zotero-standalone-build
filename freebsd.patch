diff --git a/build.sh b/build.sh
index fd661ca..d67fdb9 100755
--- a/build.sh
+++ b/build.sh
@@ -39,7 +39,7 @@ Options
  -d DIR              build directory to build from (from build_xpi; cannot be used with -f)
  -f FILE             ZIP file to build from (cannot be used with -d)
  -t                  add devtools
- -p PLATFORMS        build for platforms PLATFORMS (m=Mac, w=Windows, l=Linux)
+ -p PLATFORMS        build for platforms PLATFORMS (m=Mac, w=Windows, l=Linux, f=FreeBSD)
  -c CHANNEL          use update channel CHANNEL
  -e                  enforce signing
  -s                  don't package; only build binaries in staging/ directory
@@ -62,6 +62,7 @@ ZIP_FILE=""
 BUILD_MAC=0
 BUILD_WIN32=0
 BUILD_LINUX=0
+BUILD_FREEBSD=0
 PACKAGE=1
 DEVTOOLS=0
 while getopts "d:f:p:c:tse" opt; do
@@ -79,6 +80,7 @@ while getopts "d:f:p:c:tse" opt; do
 					m) BUILD_MAC=1;;
 					w) BUILD_WIN32=1;;
 					l) BUILD_LINUX=1;;
+					f) BUILD_FREEBSD=1;;
 					*)
 						echo "$0: Invalid platform option ${OPTARG:i:1}"
 						usage
@@ -113,7 +115,7 @@ elif [[ -n "$SOURCE_DIR" ]] && [[ -n "$ZIP_FILE" ]]; then
 fi
 
 # Require at least one platform
-if [[ $BUILD_MAC == 0 ]] && [[ $BUILD_WIN32 == 0 ]] && [[ $BUILD_LINUX == 0 ]]; then
+if [[ $BUILD_MAC == 0 ]] && [[ $BUILD_WIN32 == 0 ]] && [[ $BUILD_LINUX == 0 ]] && [[ $BUILD_FREEBSD == 0 ]]; then
 	usage
 fi
 
@@ -548,4 +550,76 @@ if [ $BUILD_LINUX == 1 ]; then
 	done
 fi
 
+# FreeBSD
+if [ $BUILD_FREEBSD == 1 ]; then
+	for arch in "x86_64"; do
+		RUNTIME_PATH=`eval echo '$FREEBSD_RUNTIME_PATH'`
+
+		# Set up directory
+		echo 'Building Zotero_freebsd'
+		APPDIR="$STAGE_DIR/Zotero_freebsd"
+		rm -rf "$APPDIR"
+		mkdir "$APPDIR"
+
+		# Merge relevant assets from Firefox
+		cp -r "$RUNTIME_PATH/"!(application.ini|browser|defaults|devtools-files|crashreporter|crashreporter.ini|firefox-bin|pingsender|precomplete|removed-files|run-mozilla.sh|update-settings.ini|updater|updater.ini) "$APPDIR"
+
+		# Use our own launcher that calls the original Firefox executable with -app
+		mv "$APPDIR"/firefox "$APPDIR"/zotero-bin
+		cp "$CALLDIR/linux/zotero" "$APPDIR"/zotero
+
+		# Copy Ubuntu launcher files
+		cp "$CALLDIR/linux/zotero.desktop" "$APPDIR"
+		cp "$CALLDIR/linux/set_launcher_icon" "$APPDIR"
+
+		# Use our own updater, because Mozilla's requires updates signed by Mozilla
+		# Should be modified
+		cp "$CALLDIR/linux/updater-$arch" "$APPDIR"/updater
+
+		# Copy PDF tools and data
+		cp "$CALLDIR/pdftools/pdftotext-linux-$arch" "$APPDIR/pdftotext"
+		cp "$CALLDIR/pdftools/pdfinfo-linux-$arch" "$APPDIR/pdfinfo"
+		cp -R "$CALLDIR/pdftools/poppler-data" "$APPDIR/"
+
+		cp -R "$BUILD_DIR/zotero/"* "$BUILD_DIR/application.ini" "$APPDIR"
+
+		# Modify platform-specific prefs
+		perl -pi -e 's/pref\("browser\.preferences\.instantApply", false\);/pref\("browser\.preferences\.instantApply", true);/' "$BUILD_DIR/zotero/defaults/preferences/prefs.js"
+		perl -pi -e 's/%GECKO_VERSION%/'"$GECKO_VERSION_LINUX"'/g' "$BUILD_DIR/zotero/defaults/preferences/prefs.js"
+
+		# Add Unix-specific Standalone assets
+		cd "$CALLDIR/assets/unix"
+		zip -0 -r -q "$APPDIR/zotero.jar" *
+
+		# Add devtools
+		if [ $DEVTOOLS -eq 1 ]; then
+			cp -r "$RUNTIME_PATH"/devtools-files/chrome/* "$APPDIR/chrome/"
+			cp "$RUNTIME_PATH/devtools-files/components/interfaces.xpt" "$APPDIR/components/"
+		fi
+
+		# Add word processor plug-ins
+		mkdir -p "$APPDIR/extensions"
+		cp -RH "$CALLDIR/modules/zotero-libreoffice-integration" "$APPDIR/extensions/zoteroOpenOfficeIntegration@zotero.org"
+		perl -pi -e 's/\.SOURCE<\/em:version>/.SA.'"$VERSION"'<\/em:version>/' "$APPDIR/extensions/zoteroOpenOfficeIntegration@zotero.org/install.rdf"
+		echo
+		echo -n "$ext Version: "
+		perl -ne 'print and last if s/.*<em:version>(.*)<\/em:version>.*/\1/;' "$APPDIR/extensions/zoteroOpenOfficeIntegration@zotero.org/install.rdf"
+		echo
+		rm -rf "$APPDIR/extensions/zoteroOpenOfficeIntegration@zotero.org/.git"
+
+		# Delete extraneous files
+		find "$APPDIR" -depth -type d -name .git -exec rm -rf {} \;
+		find "$APPDIR" \( -name .DS_Store -or -name update.rdf \) -exec rm -f {} \;
+		find "$APPDIR/extensions" -depth -type d -name build -exec rm -rf {} \;
+
+		if [ $PACKAGE == 1 ]; then
+			# Create tar
+			rm -f "$DIST_DIR/Zotero-${VERSION}_freebsd.tar.bz2"
+			cd "$STAGE_DIR"
+			tar -cjf "$DIST_DIR/Zotero-${VERSION}_freebsd.tar.bz2" "Zotero_freebsd"
+		fi
+	done
+fi
+
+
 rm -rf $BUILD_DIR
diff --git a/config.sh b/config.sh
index 9badd1f..aae0bd7 100644
--- a/config.sh
+++ b/config.sh
@@ -10,6 +10,7 @@ MAC_RUNTIME_PATH="$DIR/xulrunner/Firefox.app"
 WIN32_RUNTIME_PATH="$DIR/xulrunner/firefox-win32"
 LINUX_i686_RUNTIME_PATH="$DIR/xulrunner/firefox-i686"
 LINUX_x86_64_RUNTIME_PATH="$DIR/xulrunner/firefox-x86_64"
+FREEBSD_RUNTIME_PATH="$DIR/xulrunner/firefox"
 
 PDF_TOOLS_VERSION="0.0.3"
 PDF_TOOLS_URL="https://zotero-download.s3.amazonaws.com/pdftools/pdftools-$PDF_TOOLS_VERSION.tar.gz"
diff --git a/fetch_xulrunner.sh b/fetch_xulrunner.sh
index dbd8bfa..e43f4c3 100755
--- a/fetch_xulrunner.sh
+++ b/fetch_xulrunner.sh
@@ -26,7 +26,7 @@ function usage {
 	cat >&2 <<DONE
 Usage: $0 -p platforms
 Options
- -p PLATFORMS        Platforms to build (m=Mac, w=Windows, l=Linux)
+ -p PLATFORMS        Platforms to build (m=Mac, w=Windows, l=Linux, f=FreeBSD)
 DONE
 	exit 1
 }
@@ -34,6 +34,8 @@ DONE
 BUILD_MAC=0
 BUILD_WIN32=0
 BUILD_LINUX=0
+BUILD_FREEBSD=0
+
 while getopts "p:" opt; do
 	case $opt in
 		p)
@@ -43,6 +45,7 @@ while getopts "p:" opt; do
 					m) BUILD_MAC=1;;
 					w) BUILD_WIN32=1;;
 					l) BUILD_LINUX=1;;
+					f) BUILD_FREEBSD=1;;
 					*)
 						echo "$0: Invalid platform option ${OPTARG:i:1}"
 						usage
@@ -54,8 +57,10 @@ while getopts "p:" opt; do
 	shift $((OPTIND-1)); OPTIND=1
 done
 
+
+
 # Require at least one platform
-if [[ $BUILD_MAC == 0 ]] && [[ $BUILD_WIN32 == 0 ]] && [[ $BUILD_LINUX == 0 ]]; then
+if [[ $BUILD_MAC == 0 ]] && [[ $BUILD_WIN32 == 0 ]] && [[ $BUILD_LINUX == 0 ]] && [[ $BUILD_FREEBSD == 0 ]]; then
 	usage
 fi
 
@@ -192,4 +197,18 @@ if [ $BUILD_LINUX == 1 ]; then
 	rm "firefox-$GECKO_VERSION.tar.bz2"
 fi
 
-echo Done
\ No newline at end of file
+if [ $BUILD_FREEBSD == 1 ]; then
+	rm -rf firefox
+	GECKO_VERSION="${GECKO_VERSION_LINUX/esr/}"
+	cp  /usr/ports/packages/All/firefox-esr-${GECKO_VERSION}*  ./
+	echo "copied local file"
+
+	tar -xvf firefox-esr-${GECKO_VERSION}*.txz --strip-components 4 /usr/local/lib/firefox
+	cd firefox
+	modify_omni
+	extract_devtools
+	cd ..
+	rm firefox-esr-${GECKO_VERSION}*.txz
+fi
+
+echo Done
diff --git a/scripts/check_requirements b/scripts/check_requirements
index 927a6e3..c8a2b30 100755
--- a/scripts/check_requirements
+++ b/scripts/check_requirements
@@ -56,72 +56,11 @@ echo
 echo "Checking packaging requirements:"
 echo
 
-if [ $WIN_NATIVE == 1 ]; then
-	echo -n "Checking for upx: "
-	which upx || { $FAIL_CMD; FAILED=1; }
-
-	echo -n "Checking for uuidgen: "
-	which uuidgen || { $FAIL_CMD; FAILED=1; }
-	
-	echo -n "Checking for signtool: "
-	if [ -x "`cygpath -u \"$SIGNTOOL\"`" ]; then
-		echo "`cygpath -u \"$SIGNTOOL\"`"
-	else
-		$FAIL_CMD
-		FAILED=1
-	fi
-	
-	echo -n "Checking for Unicode NSIS: "
-	if [ -x "`cygpath -u \"${NSIS_DIR}makensis.exe\"`" ]; then
-		echo "`cygpath -u \"${NSIS_DIR}makensis.exe\"`"
-	else
-		$FAIL_CMD
-		FAILED=1
-	fi
-	
-	plugin_path=$(cd "$NSIS_DIR\\Plugins" && pwd)
-	plugins="AppAssocReg ApplicationID InvokeShellVerb ShellLink UAC"
-	echo "Checking for NSIS plugins in $plugin_path"
-	for i in $plugins; do
-		echo -n "  $i.dll: "
-		if [ -f "$plugin_path/$i.dll" ]; then
-			echo OK
-		else
-			$FAIL_CMD
-			FAILED=1
-		fi
-	done
-fi
-
-if [ $MAC_NATIVE == 1 ]; then
-	echo -n "Checking for codesign: "
-	which /usr/bin/codesign || { $FAIL_CMD; FAILED=1; }
-fi
 
 echo
 echo "Checking distribution requirements:"
 echo
 
-echo -n "Checking for Mozilla ARchive (MAR) tool: "
-which mar || { $FAIL_CMD; FAILED=1; echo "  -- Install mar from https://wiki.mozilla.org/UpdateGeneration"; }
-
-echo -n "Checking for mbsdiff: "
-which mbsdiff || { $FAIL_CMD; FAILED=1; echo "  -- Install mbsdiff from https://wiki.mozilla.org/UpdateGeneration"; }
-
-echo -n "Checking for rsync: "
-which rsync || { $FAIL_CMD; FAILED=1; }
-
-echo -n "Checking for sha512sum/shasum: "
-which sha512sum 2>/dev/null || which shasum 2>/dev/null || { $FAIL_CMD; FAILED=1; }
-
-echo -n "Checking for AWS CLI: "
-which aws || { $FAIL_CMD; FAILED=1; }
-
-echo -n "Checking for AWS S3 access: "
-aws s3 ls $S3_BUCKET/$S3_DIST_PATH | sed 's/^[[:blank:]]*//' || { $FAIL_CMD; FAILED=1; }
-
-echo -n "Checking for deploy host directory access: "
-ssh $DEPLOY_HOST ls -d $DEPLOY_PATH || { $FAIL_CMD; FAILED=1; }
 
 
 exit $FAILED
diff --git a/scripts/dir_build b/scripts/dir_build
index 59260f5..73578f8 100755
--- a/scripts/dir_build
+++ b/scripts/dir_build
@@ -9,7 +9,7 @@ function usage {
 	cat >&2 <<DONE
 Usage: $0 -p platforms
 Options
- -p PLATFORMS        Platforms to build (m=Mac, w=Windows, l=Linux)
+ -p PLATFORMS        Platforms to build (m=Mac, w=Windows, l=Linux, f=freebsd)
  -t                  add devtools
 DONE
 	exit 1
@@ -29,6 +29,7 @@ while getopts "p:t" opt; do
 					m) PLATFORM="m";;
 					w) PLATFORM="w";;
 					l) PLATFORM="l";;
+					f) PLATFORM="f";;
 					*)
 						echo "$0: Invalid platform option ${OPTARG:i:1}"
 						usage
@@ -48,6 +49,8 @@ if [[ -z $PLATFORM ]]; then
 		PLATFORM="m"
 	elif [ "`uname`" = "Linux" ]; then
 		PLATFORM="l"
+	elif [ "`uname`" = "FreeBSD" ]; then
+		PLATFORM="f"
 	elif [ "`uname -o 2> /dev/null`" = "Cygwin" ]; then
 		PLATFORM="w"
 	fi
