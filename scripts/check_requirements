#!/bin/bash
set -o pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

if [ "`uname`" = "Darwin" ]; then
	MAC_NATIVE=1
else
	MAC_NATIVE=0
fi
if [ "`uname -o 2> /dev/null`" = "Cygwin" ]; then
	WIN_NATIVE=1
else
	WIN_NATIVE=0
fi

FAIL_CMD='echo -e \033[31;1mFAIL\033[0m'
FAILED=0

. "$ROOT_DIR/config.sh"

echo "Checking build requirements:"
echo

echo -n "Checking for perl: "
which perl || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for python2.7: "
which python2.7 || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for python3: "
which python3 || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for curl: "
which curl || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for wget: "
which wget || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for zip: "
which zip || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for unzip: "
which unzip || { $FAIL_CMD; FAILED=1; }

echo -n "Checking for awk: "
which awk || { $FAIL_CMD; FAILED=1; }

if [ $WIN_NATIVE == 1 ]; then
	echo -n "Checking for 7z: "
	which 7z || { $FAIL_CMD; FAILED=1; }
fi

echo
echo "Checking packaging requirements:"
echo


echo
echo "Checking distribution requirements:"
echo



exit $FAILED
